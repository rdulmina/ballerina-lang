<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~ WSO2 Inc. licenses this file to you under the Apache License,
  ~ Version 2.0 (the "License"); you may not use this file except
  ~ in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied. See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
  ~
  -->

<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >

<suite name="ballerina-new-parser-test-suite" time-out="120000">
    <test name="jballerina-test" parallel="false">
        <parameter name="enableJBallerinaTests" value="true"/>
        <groups>
            <run>
                <exclude name="brokenOnJBallerina"/>
                <exclude name="brokenOnSpecDeviation"/>
                <exclude name="brokenOnXMLLangLibChange"/>
                <exclude name="brokenOnNewParser"/>
                <exclude name="brokenOnErrorChange"/>
                <exclude name="brokenOnClassChange"/>
            </run>
        </groups>
        <packages>
            <package name="org.ballerinalang.test.vm.*"/>
            <package name="org.ballerinalang.test.annotations.*"/>
            <package name="org.ballerinalang.test.action.*"/>
            <package name="org.ballerinalang.test.imports.*"/>
<!--            <package name="org.ballerinalang.test.parser.*"/>-->
            <package name="org.ballerinalang.test.closures.*"/>
            <package name="org.ballerinalang.test.bir.*"/>

            <!-- has complex match stmt usages -->
            <!-- <package name="org.ballerinalang.test.dataflow.analysis.*"/> -->
            <package name="org.ballerinalang.test.isolation.*"/>

            <package name="org.ballerinalang.test.variable.shadowing.*"/>
            <package name="org.ballerinalang.test.net.*"/>
            <package name="org.ballerinalang.test.typedefs.*"/>
<!--            <package name="org.ballerinalang.test.access.*"/>-->
            <package name="org.ballerinalang.test.structs.*"/>
            <package name="org.ballerinalang.test.testerina.*"/>
            <package name="org.ballerinalang.test.jvm.*"/>
            <package name="org.ballerinalang.test.types.integer"/>
            <package name="org.ballerinalang.test.types.floattype"/>
            <package name="org.ballerinalang.test.main.function.*"/>
            <package name="org.ballerinalang.test.types.decimaltype.*"/>
            <package name="org.ballerinalang.test.types.any.*"/>
            <package name="org.ballerinalang.test.error.*"/>
            <package name="org.ballerinalang.test.enums.*"/>
            <package name="org.ballerinalang.test.types.finaltypes.*"/>
            <package name="org.ballerinalang.test.types.finite.*"/>
            <package name="org.ballerinalang.test.types.map.*"/>
            <package name="org.ballerinalang.test.types.string.*"/>
            <package name="org.ballerinalang.test.types.stream.*"/>
            <package name="org.ballerinalang.test.types.table.*"/>
            <package name="org.ballerinalang.test.types.errors.*"/>
            <package name="org.ballerinalang.test.types.var.*"/>
            <package name="org.ballerinalang.test.types.uniontypes.*"/>
            <package name="org.ballerinalang.test.types.typedesc.*"/>
            <package name="org.ballerinalang.test.types.tuples.*"/>
            <package name="org.ballerinalang.test.types.anydata.*"/>
            <package name="org.ballerinalang.test.statements.arrays.*"/>
            <package name="org.ballerinalang.test.statements.assign.*"/>
            <package name="org.ballerinalang.test.statements.block.*"/>
            <package name="org.ballerinalang.test.statements.breakstatement.*"/>
            <package name="org.ballerinalang.test.statements.comment.*"/>
            <package name="org.ballerinalang.test.statements.compoundassignment.*"/>
            <package name="org.ballerinalang.test.statements.continuestatement.*"/>
            <package name="org.ballerinalang.test.statements.dostatement.*"/>
            <package name="org.ballerinalang.test.statements.fail.*"/>
            <package name="org.ballerinalang.test.statements.onfail.*"/>

            <!-- No longer valid since new parser handles those -->
            <!-- <package name="org.ballerinalang.test.statements.expressionstmt.*"/> -->

            <package name="org.ballerinalang.test.statements.ifelse.*"/>
            <package name="org.ballerinalang.test.statements.packageimport.*"/>
            <package name="org.ballerinalang.test.statements.returnstmt.*"/>
            <package name="org.ballerinalang.test.statements.vardeclr.*"/>
            <package name="org.ballerinalang.test.statements.whilestatement.*"/>
            <package name="org.ballerinalang.test.statements.variabledef.*"/>
<!--            <package name="org.ballerinalang.test.statements.matchstmt.*"/>-->
            <package name="org.ballerinalang.test.types.json.*"/>
            <package name="org.ballerinalang.test.types.nullable.*"/>
            <package name="org.ballerinalang.test.types.nullvalue.*"/>
            <package name="org.ballerinalang.test.types.service.*"/>
            <package name="org.ballerinalang.test.types.globalvar.*"/>
            <package name="org.ballerinalang.test.types.intersection.*"/>
            <package name="org.ballerinalang.test.expressions.builtinoperations.*"/>
            <package name="org.ballerinalang.test.expressions.let.*"/>
            <package name="org.ballerinalang.test.expressions.checkpanicexpr.*"/>
            <package name="org.ballerinalang.test.expressions.builtinfunctions.*"/>
            <package name="org.ballerinalang.test.expressions.conversion.*"/>
            <package name="org.ballerinalang.test.expressions.unaryoperations.*"/>
            <package name="org.ballerinalang.test.expressions.access.*"/>
            <package name="org.ballerinalang.test.expressions.binaryoperations.*"/>
            <package name="org.ballerinalang.test.expressions.checkedexpr.*"/>
            <package name="org.ballerinalang.test.expressions.elvis.*"/>
            <package name="org.ballerinalang.test.expressions.ternary.*"/>
            <package name="org.ballerinalang.test.expressions.typeof.*"/>
            <package name="org.ballerinalang.test.expressions.stamp.*"/>
            <package name="org.ballerinalang.test.expressions.group.*"/>
            <package name="org.ballerinalang.test.expressions.lambda.*"/>
            <package name="org.ballerinalang.test.expressions.invocations.*"/>
            <package name="org.ballerinalang.test.expressions.mappingconstructor.*"/>
            <package name="org.ballerinalang.test.expressions.listconstructor.*"/>
            <package name="org.ballerinalang.test.expressions.rawtemplate.*"/>
            <package name="org.ballerinalang.test.expressions.object.*" />
            <package name="org.ballerinalang.test.object.*" />
            <package name="org.ballerinalang.test.documentation.*" />
            <package name="org.ballerinalang.test.endpoint.*" />
            <package name="org.ballerinalang.test.packaging.*" />
            <package name="org.ballerinalang.test.types.xml.*" />
            <package name="org.ballerinalang.test.record.*"/>
            <package name="org.ballerinalang.test.types.constant.*" />
            <package name="org.ballerinalang.test.types.bytetype.*"/>
            <package name="org.ballerinalang.test.types.handle.*"/>
            <package name="org.ballerinalang.test.balo.*"/>
            <package name="org.ballerinalang.test.expressions.typecast.*"/>
            <package name="org.ballerinalang.test.expressions.literals.*"/>
            <package name="org.ballerinalang.test.expressions.varref.*"/>
            <package name="org.ballerinalang.test.worker.*"/>
            <package name="org.ballerinalang.test.taintchecking.*"/>
            <package name="org.ballerinalang.test.functions.*"/>
            <package name="org.ballerinalang.test.javainterop.*"/>
            <package name="org.ballerinalang.test.execution.*" />
            <package name="org.ballerinalang.test.taintchecking*"/>
            <package name="org.ballerinalang.test.query.*"/>
            <package name="org.ballerinalang.test.statements.retrystmt.*"/>
            <package name="org.ballerinalang.test.types.readonly.*"/>
            <package name="org.ballerinalang.test.strand.*"/>
            <package name="org.ballerinalang.test.klass.*"/>
            <package name="org.ballerinalang.test.services.*"/>
        </packages>

        <classes>
            <class name="org.ballerinalang.test.parser.ResilientParserTest"/>
            <class name="org.ballerinalang.test.typedefs.DistinctTypeDefTest"/>
            <class name="org.ballerinalang.test.balo.constant.SimpleConstantBaloNegativeTests"></class>
            <class name="org.ballerinalang.test.expressions.builtinoperations.BuiltinOperationsTest"></class>
            <class name="org.ballerinalang.test.expressions.invocations.StringFunctionInvocationExprTest"></class>
            <class name="org.ballerinalang.test.expressions.invocations.PackageInitInvocationTest"></class>
            <class name="org.ballerinalang.test.expressions.unaryoperations.UnaryExprTest"></class>
            <class name="org.ballerinalang.test.statements.ifelse.IfElseStmtTest"></class>
            <class name="org.ballerinalang.test.worker.StackOverflowTest"></class>
            <class name="org.ballerinalang.test.worker.WaitForAllWorkersTest"></class>
            <class name="org.ballerinalang.test.javainterop.basic.AsyncTest"></class>
            <class name="org.ballerinalang.test.javainterop.basic.ConstructorTest"></class>
            <class name="org.ballerinalang.test.javainterop.basic.FieldAccessMutateTest"></class>
            <class name="org.ballerinalang.test.javainterop.basic.JavaToBallerinaTest"></class>
            <class name="org.ballerinalang.test.javainterop.primitivetypes.FunctionsReturningPrimitivesTest"></class>
            <class name="org.ballerinalang.test.javainterop.basic.HandleRefersNullTest"></class>
            <class name="org.ballerinalang.test.javainterop.primitivetypes.PrimitiveConversionInFunctionReturnsTest"></class>
            <class name="org.ballerinalang.test.javainterop.primitivetypes.PrimitiveConversionsInFunctionParamsTest"></class>
            <class name="org.ballerinalang.test.javainterop.primitivetypes.PrimitiveTypeFunctionParamTest"></class>
            <class name="org.ballerinalang.test.javainterop.primitivetypes.UnionsWithPrimitiveTypesTest"></class>
            <class name="org.ballerinalang.test.jvm.BuiltinMethodTest"></class>
            <class name="org.ballerinalang.test.jvm.TypeTestExprTest"></class>
            <class name="org.ballerinalang.test.record.RecordValueTest"></class>
            <class name="org.ballerinalang.test.statements.arrays.ArrayIndexTooLargeTest"></class>
            <class name="org.ballerinalang.test.statements.arrays.ArrayLengthAccessExprTest"></class>
            <class name="org.ballerinalang.test.statements.arrays.BArrayValueTest"></class>
            <class name="org.ballerinalang.test.statements.ifelse.IfElseStmtTest"></class>
            <class name="org.ballerinalang.test.statements.returnstmt.NamedReturnParameterTest"></class>
            <class name="org.ballerinalang.test.statements.returnstmt.ReturnStmtInBranchTest"></class>
            <class name="org.ballerinalang.test.statements.variabledef.VariableDefinitionTest"></class>
            <class name="org.ballerinalang.test.structs.StructEquivalencyNegativeTest"></class>
            <class name="org.ballerinalang.test.testerina.TopLevelNodesTest"></class>
            <class name="org.ballerinalang.test.types.any.BAnyTypeInvalidCastError"></class>
            <class name="org.ballerinalang.test.types.globalvar.GlobalVarFunctionTest"></class>
            <class name="org.ballerinalang.test.types.var.TopLevelVarDeclarationTest"></class>
            <class name="org.ballerinalang.test.vm.DynamicControlStackTest"></class>
            <class name="org.ballerinalang.test.javainterop.RefTypeNegativeTests"></class>
            <class name="org.ballerinalang.test.types.constant.ConstantAccessNegativeTest"></class>
            <class name="org.ballerinalang.test.types.constant.ConstantAccessTest"></class>
            <class name="org.ballerinalang.test.types.var.VarIgnoreTest"></class>
            <class name="org.ballerinalang.test.documentation.MultilineDocsTest"></class>
            <class name="org.ballerinalang.test.documentation.ObjectFieldDefaultValueTest"></class>
            <class name="org.ballerinalang.test.statements.matchstmt.MatchStmtConstPatternTest"></class>
            <class name="org.ballerinalang.test.statements.matchstmt.MatchStatementSyntaxErrorsTest"></class>
            <class name="org.ballerinalang.test.statements.matchstmt.varbindingpatternmatchpattern.CaptureBindingPatternTest"></class>
            <class name="org.ballerinalang.test.statements.matchstmt.MatchStmtListMatchPatternTest"></class>
            <class name="org.ballerinalang.test.statements.matchstmt.MatchStatementOnFailTest"></class>
            <class name="org.ballerinalang.test.lock.LocksWithOnFailTest"></class>
            <!--<class name="org.ballerinalang.test.closures.VarMutabilityClosureTest" />-->
            <!--<class name="org.ballerinalang.test.lock.LocksInMainTest">-->
            <!--<methods>-->
            <!--<include name="simpleLock"/>-->
            <!--</methods>-->
            <!--</class>-->
<!--            <class name="org.ballerinalang.test.lock.LocksInServicesTest">-->
<!--                <methods>-->
<!--                    &lt;!&ndash; Not supported at the moment &ndash;&gt;-->
<!--                    <exclude name="testFieldLock"></exclude>-->
<!--                </methods>-->
<!--            </class>-->
            <class name="org.ballerinalang.test.lock.LocksInMainTest" />
            <class name="org.ballerinalang.test.lock.FieldLockTest">
                <methods>
                    <!-- Not supported at the moment -->
                    <exclude name="testObjectLock" />
                    <exclude name="testLockInRecords" />
                </methods>
            </class>
            <!-- <class name="org.ballerinalang.test.types.TypeUnificationTest"/> -->
            <!--<class name="org.ballerinalang.test.error.ErrorTest" />-->
            <class name="org.ballerinalang.test.expressions.async.BasicAsyncOperationsTest">
                <methods>
                    <exclude name="testAsyncNonNativeBasic6" />
                    <exclude name="testAsyncNonNativeBasic7" />
                    <exclude name="testAsyncNonNativeBasic8" />
                    <exclude name="testAsyncNonNativeBasic9" />
                    <exclude name="testAsyncNonNativeBasic10" />
                    <exclude name="testAsyncNonNativeBasic11" />
                </methods>
            </class>
            <class name="org.ballerinalang.test.balo.record.OpenRecordTypeReferenceTest" />
            <class name="org.ballerinalang.test.balo.record.ClosedRecordTypeReferenceTest" />


            <!-- Disabled tests related to ProjectAPI change -->
            <!-- ########################## START ############################# -->

            <class name="org.ballerinalang.test.record.AnonymousOpenRecordTest">
                <methods>
                    <exclude name="testAnonRecordAsRestFieldOfAnonRecord"/>
                    <exclude name="testAnonRecordWithRestField"/>
                    <exclude name="testAnonStructAsFuncParam"/>
                    <exclude name="testAnonStructAsLocalVar"/>
                    <exclude name="testAnonStructAsPkgVar"/>
                    <exclude name="testAnonStructAsStructField"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.worker.WorkerSyncSendTest">
                <methods>
                    <exclude name="basicSyncSendTest"/>
                    <exclude name="errorAfterSendTest"/>
                    <exclude name="errorResultWithMultipleWorkers"/>
                    <exclude name="multiWorkerTest"/>
                    <exclude name="multipleSendsToErroredWorker"/>
                    <exclude name="multipleSyncSendTest"/>
                    <exclude name="multipleSyncSendWithPanic"/>
                    <exclude name="multipleSyncSendWithPanicInSend"/>
                    <exclude name="nilReturnTest"/>
                    <exclude name="panicAfterSendTest"/>
                    <exclude name="panicWithMultipleSendStmtsTest"/>
                    <exclude name="simpleSyncSendTest"/>
                    <exclude name="syncSendWithPanicInReceive"/>
                    <exclude name="testComplexTypeSend"/>
                    <exclude name="testFailureForReceiveWithError"/>
                    <exclude name="testNoFailureForReceiveWithError"/>
                    <exclude name="testSyncSendAfterSend"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.javainterop.basic.StaticMethodTest">
                <methods>
                    <exclude name="testAcceptNothingAndReturnNothing"/>
                    <exclude name="testAcceptNothingButReturnDate"/>
                    <exclude name="testAcceptNothingButReturnString"/>
                    <exclude name="testAcceptSomethingAndReturnSomething"/>
                    <exclude name="testBalEnvFastAsync"/>
                    <exclude name="testBalEnvFastAsyncVoidSig"/>
                    <exclude name="testBalEnvSlowAsync"/>
                    <exclude name="testBalEnvSlowAsyncVoidSig"/>
                    <exclude name="testDecimalParamAndReturn"/>
                    <exclude name="testFuncWithAsyncDefaultParamExpression"/>
                    <exclude name="testInteropFunctionWithDifferentName"/>
                    <exclude name="testJavaInteropFunctionThatAcceptsThreeParameters"/>
                    <exclude name="testJavaInteropFunctionThatAcceptsTwoParameters"/>
                    <exclude name="testMapValueOrErrorReturn"/>
                    <exclude name="testReturnObjectValueOrError"/>
                    <exclude name="testStaticResolve"/>
                    <exclude name="testStringParamAndReturn"/>
                    <exclude name="testTupleReturn"/>
                    <exclude name="testUsingParamValues"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.action.start.StartActionTest">
                <methods>
                    <exclude name="testStartActionNegative"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.worker.WaitForAllActionsTest">
                <methods>
                    <exclude name="waitTest1"/>
                    <exclude name="waitTest10"/>
                    <exclude name="waitTest11"/>
                    <exclude name="waitTest12"/>
                    <exclude name="waitTest13"/>
                    <exclude name="waitTest14"/>
                    <exclude name="waitTest15"/>
                    <exclude name="waitTest16"/>
                    <exclude name="waitTest17"/>
                    <exclude name="waitTest18"/>
                    <exclude name="waitTest19"/>
                    <exclude name="waitTest2"/>
                    <exclude name="waitTest20"/>
                    <exclude name="waitTest21"/>
                    <exclude name="waitTest22"/>
                    <exclude name="waitTest23"/>
                    <exclude name="waitTest24"/>
                    <exclude name="waitTest25"/>
                    <exclude name="waitTest26"/>
                    <exclude name="waitTest27"/>
                    <exclude name="waitTest3"/>
                    <exclude name="waitTest4"/>
                    <exclude name="waitTest5"/>
                    <exclude name="waitTest6"/>
                    <exclude name="waitTest7"/>
                    <exclude name="waitTest8"/>
                    <exclude name="waitTest9"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.execution.ModuleExecutionFlowTests">
                <methods>
                    <exclude name="testModuleInitPanic"/>
                    <exclude name="testModuleInitReturningError"/>
                    <exclude name="testModuleStartAndStopPanic"/>
                    <exclude name="testModuleStartPanic"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.taintchecking.TaintedStatusPropagationTest">
                <methods>
                    <exclude name="testParameterStatusWithNativeInvocations"/>
                    <exclude name="testParameterStatusWithNativeInvocationsNegative"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.error.ErrorTest">
                <methods>
                    <exclude name="customErrorDetailsTest"/>
                    <exclude name="errorConstructDetailTest"/>
                    <exclude name="errorConstructReasonTest"/>
                    <exclude name="errorPanicTest"/>
                    <exclude name="errorReasonSubtypeTest"/>
                    <exclude name="errorTrapTest"/>
                    <exclude name="indirectErrorCtorTest"/>
                    <exclude name="testConsecutiveTraps"/>
                    <exclude name="testCustomErrorDetails2"/>
                    <exclude name="testDefaultErrorTypeDescriptionInferring"/>
                    <exclude name="testErrorTrapVarReuse"/>
                    <exclude name="testErrorTypeDescriptionInferring"/>
                    <exclude name="testErrorUnionPassedToErrorParam"/>
                    <exclude name="testErrorWithConstantAsReason"/>
                    <exclude name="testErrorWithConstantAsReason"/>
                    <exclude name="testErrorWithErrorConstructor"/>
                    <exclude name="testErrorWithUserDefinedReasonType"/>
                    <exclude name="testErrorWithUserDefinedReasonType"/>
                    <exclude name="testGenericErrorWithDetailRecord"/>
                    <exclude name="testIndirectErrorCtor"/>
                    <exclude name="testIndirectErrorReturn"/>
                    <exclude name="testOneLinePanic"/>
                    <exclude name="testOptionalErrorReturn"/>
                    <exclude name="testPanicOnErrorUnion"/>
                    <exclude name="testPanicOnErrorUnionCustomError"/>
                    <exclude name="testPanicOnErrorUnionCustomError2"/>
                    <exclude name="testStackOverFlow"/>
                    <exclude name="testTrapSuccessScenario"/>
                    <exclude name="testUnionErrorTypeDescriptionInferring"/>
                    <exclude name="testUnionLhsWithIndirectErrorRhs"/>
                    <exclude name="testUnspecifiedErrorDetailFrozenness"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.object.ObjectTest">
                <methods>
                    <exclude name="testObjectAttachFuncReturningTuple"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.worker.BasicWorkerTest">
                <methods>
                    <exclude name="basicForkTest"/>
                    <exclude name="forkWithMessageParsingTest"/>
                    <exclude name="forkWithWaitForAny"/>
                    <exclude name="simpleWorkerMessagePassingTest"/>
                    <exclude name="workerDeclTest"/>
                    <exclude name="workerReturnTest"/>
                    <exclude name="workerSameThreadSchedulingTest"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.worker.WaitForOneActionsTest">
                <methods>
                    <exclude name="asyncObjectCreationTest"/>
                    <exclude name="waitTest1"/>
                    <exclude name="waitTest2"/>
                    <exclude name="waitTest3"/>
                    <exclude name="waitTest4"/>
                    <exclude name="waitTest5"/>
                    <exclude name="waitTest6"/>
                    <exclude name="waitTest7"/>
                    <exclude name="waitTest8"/>
                    <exclude name="waitTest9"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.worker.WaitForAnyActionsTest">
                <methods>
                    <exclude name="waitTest1"/>
                    <exclude name="waitTest10"/>
                    <exclude name="waitTest11"/>
                    <exclude name="waitTest12"/>
                    <exclude name="waitTest13"/>
                    <exclude name="waitTest14"/>
                    <exclude name="waitTest15"/>
                    <exclude name="waitTest16"/>
                    <exclude name="waitTest17"/>
                    <exclude name="waitTest18"/>
                    <exclude name="waitTest19"/>
                    <exclude name="waitTest2"/>
                    <exclude name="waitTest20"/>
                    <exclude name="waitTest21"/>
                    <exclude name="waitTest22"/>
                    <exclude name="waitTest23"/>
                    <exclude name="waitTest24"/>
                    <exclude name="waitTest3"/>
                    <exclude name="waitTest4"/>
                    <exclude name="waitTest5"/>
                    <exclude name="waitTest6"/>
                    <exclude name="waitTest7"/>
                    <exclude name="waitTest8"/>
                    <exclude name="waitTest9"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.worker.WaitForAllWorkersTest">
                <methods>
                    <exclude name="sendToFork"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.worker.WorkerCancelledTest">
                <methods>
                    <exclude name="workerCancelledBeforeSend"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.types.constant.ConstantAssignmentTest">
                <methods>
                    <exclude name="testConstantAssignmentExpression"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.lock.LocksInMainTest">
                <methods>
                    <exclude name="testBreakInsideLock"/>
                    <exclude name="testForGlobalRefUpdateInsideConditional"/>
                    <exclude name="testForGlobalRefUpdateInsideWorker"/>
                    <exclude name="testLockInsideWhileLoop"/>
                    <exclude name="testLockNegativeCases"/>
                    <exclude name="testLockWithinFunctionsDownTheLine"/>
                    <exclude name="testLockWithinLock"/>
                    <exclude name="testLockWithinLockInWorkers"/>
                    <exclude name="testLockWithinLockInWorkersForBlobAndBoolean"/>
                    <exclude name="testLocksWhenGlobalVariablesReferToSameValue"/>
                    <exclude name="testNextInsideLock"/>
                    <exclude name="testParallelRunWithChainedInvocationDependencies"/>
                    <exclude name="testParallelRunWithImportInvocationDependencies"/>
                    <exclude name="testParallelRunWithInvocationDependencies"/>
                    <exclude name="testParallelRunWithRecursiveInvocationDependencies"/>
                    <exclude name="testThrowErrorInsideLockInsideTrap"/>
                    <exclude name="testThrowErrorInsideLockInsideTryCatch"/>
                    <exclude name="testThrowErrorInsideTryCatchFinallyInsideLock"/>
                    <exclude name="testThrowErrorInsideTryCatchInsideLock"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.functions.FunctionsWithDefaultableArguments">
                <methods>
                    <exclude name="testAttachedAsyncDefaultParam"/>
                    <exclude name="testCombinedExprAsDefaultValue"/>
                    <exclude name="testDefaultExprInFunctionPointers"/>
                    <exclude name="testDefaultObject"/>
                    <exclude name="testDefaultValueWithError"/>
                    <exclude name="testDefaultValueWithTernary"/>
                    <exclude name="testFuncWithAsyncDefaultParamExpression"/>
                    <exclude name="testFunctionCallAsDefaultExpr"/>
                    <exclude name="testPanicWithinDefaultExpr"/>
                    <exclude name="testRecordAsDefaultExpr"/>
                    <exclude name="testUsingParamValues"/>
                    <exclude name="testUsingParamValuesInAttachedFunc"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.expressions.async.BasicAsyncOperationsTest">
                <methods>
                    <exclude name="testAsyncInvWithDefaultParams"/>
                    <exclude name="testAsyncInvWithoutDefaultParams"/>
                    <exclude name="testAsyncNegative"/>
                    <exclude name="testAsyncNonNativeBasic1"/>
                    <exclude name="testAsyncNonNativeBasic2"/>
                    <exclude name="testAsyncNonNativeBasic3"/>
                    <exclude name="testAsyncNonNativeBasic4"/>
                    <exclude name="testAsyncNonNativeBasic5"/>
                    <exclude name="testAsyncObjectAttachedFunctions"/>
                    <exclude name="testAttachedAsyncInvWithDefaultParams"/>
                    <exclude name="testAttachedAsyncInvWithoutDefaultParams"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.statements.variabledef.ForwardReferencingGlobalDefinitionTest">
                <methods>
                    <exclude name="globalDefinitionsReOrdering"/>
                    <exclude name="inFunctionGlobalReference"/>
                    <exclude name="inFunctionGlobalReferenceCauseCycle"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.worker.WorkerFlushTest">
                <methods>
                    <exclude name="errorBeforeFlush"/>
                    <exclude name="flushAll"/>
                    <exclude name="flushInDefault"/>
                    <exclude name="flushInDefaultError"/>
                    <exclude name="flushReturnNilTest"/>
                    <exclude name="panicBeforeFlush"/>
                    <exclude name="simpleFlushTest"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.worker.WorkerInActionTest">
                <methods>
                    <exclude name="testConnectorAction1"/>
                    <exclude name="testConnectorAction2"/>
                    <exclude name="testDefaultErrorBeforeSend"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.worker.WorkerTest">
                <methods>
                    <exclude name="innerWorkerPanicTest"/>
                    <exclude name="receiveDefaultWithCheckAndTrap"/>
                    <exclude name="receiveFromDefaultWithPanicAfterReceiveInWorker"/>
                    <exclude name="receiveFromDefaultWithPanicAfterSendInDefault"/>
                    <exclude name="receiveFromDefaultWithPanicBeforeReceiveInWorker"/>
                    <exclude name="receiveFromDefaultWithPanicBeforeSendInDefault"/>
                    <exclude name="receiveWithCheck"/>
                    <exclude name="receiveWithCheckAndTrap"/>
                    <exclude name="receiveWithCheckForDefault"/>
                    <exclude name="receiveWithCheckpanic"/>
                    <exclude name="receiveWithTrap"/>
                    <exclude name="receiveWithTrapForDefault"/>
                    <exclude name="sendToDefaultWithPanicAfterSendInDefault"/>
                    <exclude name="sendToDefaultWithPanicAfterSendInWorker"/>
                    <exclude name="sendToDefaultWithPanicBeforeSendInDefault"/>
                    <exclude name="sendToDefaultWithPanicBeforeSendInWorker"/>
                    <exclude name="syncSendReceiveWithCheck"/>
                    <exclude name="syncSendReceiveWithCheckpanic"/>
                    <exclude name="syncSendReceiveWithTrap"/>
                    <exclude name="testComplexTypeSend"/>
                    <exclude name="testFunctionWithStartInsideLock"/>
                    <exclude name="testFunctionWithStartInsideLockWithDepth3"/>
                    <exclude name="testFunctionWithWorkerInsideLock"/>
                    <exclude name="testFunctionWithWorkerInsideLockWithDepth3"/>
                    <exclude name="testWorkerInsideLock"/>
                    <exclude name="waitInReturn"/>
                    <exclude name="waitOnSameFutureByMultiple"/>
                    <exclude name="workerReturnTest"/>
                    <exclude name="workerSendFromDefault"/>
                    <exclude name="workerSendToDefault"/>
                    <exclude name="workerSendToWorkerTest"/>
                    <exclude name="workerTestWithLambda"/>
                    <exclude name="workerWithFutureTest1"/>
                    <exclude name="workerWithFutureTest2"/>
                    <exclude name="workerWithFutureTest3"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.balo.record.OpenRecordTypeReferenceTest">
                <methods>
                    <exclude name="testCreatingRecordWithOverriddenFields"/>
                    <exclude name="testDefaultValueInit"/>
                    <exclude name="testDefaultValueInitInBALOs"/>
                    <exclude name="testOrdering"/>
                    <exclude name="testRefTypes"/>
                    <exclude name="testReferenceChains"/>
                    <exclude name="testTypeReferencingInBALOs"/>
                    <exclude name="testValRefType"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.worker.PackageInitWorkerTest">
                <methods>
                    <exclude name="testPackageInitWorkerTest"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.lock.FieldLockTest">
                <methods>
                    <exclude name="testLockInAttachedFunc"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.documentation.ErrorsTest">
                <methods>
                    <exclude name="testErrorAsAType"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.strand.worker.StrandMetadataTest">
                <methods>
                    <exclude name="testStrandMetadataAsyncCalls"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.javainterop.basic.JavaToBallerinaTest">
                <methods>
                    <exclude name="testUsingExistingBallerinaRuntime"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.worker.NotSoBasicWorkerTest">
                <methods>
                    <exclude name="chainedWorkerSendReceive"/>
                    <exclude name="forkWithMessagePassing"/>
                    <exclude name="forkWithSameWorkerContent"/>
                    <exclude name="forkWithStructTest"/>
                    <exclude name="forkWithWaitOnAllSelectedWorkers1"/>
                    <exclude name="forkWithWaitOnAllSelectedWorkers2"/>
                    <exclude name="forkWithWaitOnSomeSelectedWorkers1"/>
                    <exclude name="forkWithWaitOnSomeSelectedWorkers2"/>
                    <exclude name="forkWithWaitOnSomeSelectedWorkers3"/>
                    <exclude name="forkWithinWorkers"/>
                    <exclude name="largeForkCreationTest"/>
                    <exclude name="testVoidFunctionWorkers"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.bir.BirVariableOptimizationTest">
                <methods>
                    <exclude name="testAttachedFunctions"/>
                    <exclude name="testFunctions"/>
                </methods>
            </class>
            <!-- ########################## END ############################# -->

        </classes>
    </test>
</suite>
