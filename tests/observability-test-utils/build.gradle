/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply plugin: 'com.github.johnrengelman.shadow'
apply from: "$rootDir/gradle/ballerinaStdLibBuild.gradle"

configurations {
    all {
        resolutionStrategy.preferProjectModules()
    }
    jballerinaTools
    testUtils {
        transitive false
    }
}

dependencies {
    baloCreat project(':lib-creator')

    shadow 'com.google.code.gson:gson'
    shadow project(':ballerina-core')
    shadow project(':ballerina-lang')
    shadow project(':ballerina-lang:annotations')

    implementation 'io.netty:netty-codec-http'
    implementation 'io.opentracing:opentracing-mock'
    implementation project(':ballerina-runtime')
    implementation project(':ballerina-lang:jballerina.java')

    distributionBalo project(path: ':ballerina-lang:jballerina.java', configuration: 'distributionBalo')

    testCompile 'org.testng:testng'
    testCompile 'org.slf4j:slf4j-jdk14'
    testImplementation project(path: ':ballerina-test-utils', configuration: 'shadow')

    testUtils project(path: ':ballerina-test-utils', configuration: 'shadow')
    jballerinaTools project(path: ':jballerina-tools', configuration: 'zip')
}

description = 'Ballerina - Observability - Tracing Test Utils'

jar {
    dependsOn shadowJar
}

shadowJar {
    configurations = [project.configurations.runtimeClasspath]
    dependencies {
        exclude('META-INF/*.SF')
        exclude('META-INF/*.DSA')
        exclude('META-INF/*.RSA')
    }
}

task updateVersion {
    ant.replaceregexp(
            file: "${projectDir}/src/main/ballerina/Ballerina.toml",
            match: "${project.name}-(.*).jar",
            replace: "${project.name}-${project.version}.jar"
    )
}

ballerinaLangLibBuild {
    pkgName = 'testobserve'
    dependsOn compileJava
    dependsOn updateVersion
}

test {
    // make sure ballerina zip is built before test run
    dependsOn ballerinaLangLibBuild
    dependsOn ':jballerina-tools:build'
    dependsOn shadowJar
    systemProperty 'enableJBallerinaTests', 'true'

    systemProperty 'basedir', "$buildDir"
    systemProperty 'libdir', "$buildDir"
    systemProperty 'server.zip', configurations.jballerinaTools.asPath
    systemProperty 'jballerina.server.zip', configurations.jballerinaTools.asPath
    systemProperty 'java.util.logging.config.file', "$buildDir/resources/test/logging.properties"
    systemProperty 'java.util.logging.manager', 'org.ballerinalang.logging.BLogManager'
    systemProperty 'ballerina.agent.path', configurations.testUtils.asPath
    systemProperty 'observability.test.utils.balo', "$buildDir/ballerina-src/target/testobserve.zip"
    systemProperty 'observability.test.utils.jar', tasks.shadowJar.archiveFile.get().asFile
    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
}
