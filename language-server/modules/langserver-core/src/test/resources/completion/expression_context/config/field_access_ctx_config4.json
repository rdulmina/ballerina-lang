{
  "position": {
    "line": 2,
    "character": 11
  },
  "source": "expression_context/source/field_access_ctx_source4.bal",
  "items": [
    {
      "label": "foreach - xmlVal",
      "kind": "Snippet",
      "detail": "foreach snippet for iterable variable - xmlVal",
      "sortText": "Q",
      "insertText": "foreach xml item in xmlVal {\n\t${1}\n}",
      "insertTextFormat": "Snippet",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 4
            },
            "end": {
              "line": 2,
              "character": 11
            }
          },
          "newText": ""
        }
      ]
    },
    {
      "label": "data()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.8.0_  \n  \nReturns a string with the character data of an xml value.  \n  \n  \n**Returns** `string`   \n- a string consisting of all the character data of `x`  \nThe character data of an xml value is as follows:  \n* the character data of a text item is a string with one character for each  \ncharacter information item represented by the text item;  \n* the character data of an element item is the character data of its children;  \n* the character data of a comment item is the empty string;  \n* the character data of a processing instruction item is the empty string;  \n* the character data of an empty xml sequence is the empty string;  \n* the character data of the concatenation of two xml sequences x1 and x2 is the  \nconcatenation of the character data of x1 and the character data of x2.  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "data()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "forEach(function () func)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.8.0_  \n  \nApplies a function to each item in an xml sequence.\nEach item is represented as a singleton value.\n  \n**Params**  \n- `function ()` func: a function to apply to each item in `x`"
        }
      },
      "sortText": "D",
      "insertText": "forEach(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "length()(int)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.8.0_  \n  \nReturns number of xml items in `x`.\n  \n  \n  \n**Returns** `int`   \n- number of XML items in `x`  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "length()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "filter(function () func)(xml<xml:Element|xml:Comment|xml:ProcessingInstruction|xml:Text>)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.8.0_  \n  \nSelects the items from an xml sequence for which a function returns true.\nEach item is represented as a singleton value.\n  \n**Params**  \n- `function ()` func: a predicate to apply to each item to test whether it should be selected  \n  \n**Returns** `xml<xml:Element|xml:Comment|xml:ProcessingInstruction|xml:Text>`   \n- new xml sequence containing items in `x` for which `func` evaluates to true  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "filter(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "iterator()(object {public isolated function next() returns record {| xml:Element|xml:Comment|xml:ProcessingInstruction|xml:Text value; |}? ;})",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.8.0_  \n  \nReturns an iterator over the xml items of `x`\n  \n  \n  \n**Returns** `object {public isolated function next() returns record {| xml:Element|xml:Comment|xml:ProcessingInstruction|xml:Text value; |}? ;}`   \n- iterator object  \nEach item is represented by an xml singleton.  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "iterator()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "strip()(xml<xml:Element|xml:Comment|xml:ProcessingInstruction|xml:Text>)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.8.0_  \n  \nStrips the insignificant parts of the an xml value.\nComment items, processing instruction items are considered insignificant.\nAfter removal of comments and processing instructions, the text is grouped into\nthe biggest possible chunks (i.e. only elements cause division into multiple chunks)\nand a chunk is considered insignificant if the entire chunk is whitespace.\n  \n  \n  \n**Returns** `xml<xml:Element|xml:Comment|xml:ProcessingInstruction|xml:Text>`   \n- `x` with insignificant parts removed  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "strip()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "slice(int startIndex, int endIndex)(xml<xml:Element|xml:Comment|xml:ProcessingInstruction|xml:Text>)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.8.0_  \n  \nReturns a subsequence of an xml value.\n  \n**Params**  \n- `int` startIndex: start index, inclusive  \n- `int` endIndex: end index, exclusive(Defaultable)  \n  \n**Returns** `xml<xml:Element|xml:Comment|xml:ProcessingInstruction|xml:Text>`   \n- a subsequence of `x` consisting of items with index >= startIndex and < endIndex  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "slice(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "children()(xml<xml:Element|xml:Comment|xml:ProcessingInstruction|xml:Text>)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.8.0_  \n  \nReturns the children of elements in an xml value.\nWhen `x` is of type Element, it is equivalent to `getChildren`.  \n  \n  \n**Returns** `xml<xml:Element|xml:Comment|xml:ProcessingInstruction|xml:Text>`   \n- xml sequence containing the children of each element x concatenated in order  \nThis is equivalent to `elements(x).map(getChildren)`.  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "children()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "get(int i)(xml<xml:Element|xml:Comment|xml:ProcessingInstruction|xml:Text>)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.8.0_  \n  \nReturns the item of `x` with index `i`.\nThis differs from `x[i]` in that it panics if\n`x` does not have an item with index `i`.\n  \n**Params**  \n- `int` i: the index  \n  \n**Returns** `xml<xml:Element|xml:Comment|xml:ProcessingInstruction|xml:Text>`   \n- the item with index `i` in `x`  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "get(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "elements(string? nm)(xml<xml:Element>)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.8.0_  \n  \nSelects elements from an xml value.\nIf `nm` is `()`, selects all elements;\notherwise, selects only elements whose expanded name is `nm`.\n  \n**Params**  \n- `string?` nm: the expanded name of the elements to be selected, or `()` for all elements(Defaultable)  \n  \n**Returns** `xml<xml:Element>`   \n- an xml sequence consisting of all the element items in `x` whose expanded name is `nm`,  \nor, if `nm` is `()`, all element items in `x`  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "elements(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "text()(xml:Text)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.8.0_  \n  \nSelects all the items in a sequence that are of type xml:Text  \n  \n  \n**Returns** `xml:Text`   \n- an xml sequence consisting of selected text items  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "text()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "elementChildren(string? nm)(xml<xml:Element>)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.8.0_  \n  \nSelects element children of an xml value  \n**Params**  \n- `string?` nm: the expanded name of the elements to be selected, or `()` for all elements(Defaultable)  \n  \n**Returns** `xml<xml:Element>`   \n- an xml sequence consisting of child elements of elements in `x`; if `nm`  \nis `()`, returns a sequence of all such elements;  \notherwise, include only elements whose expanded name is `nm`  \nThis is equivalent to `children(x).elements(nm)`.  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "elementChildren(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "map(function () func)(xml<xml<xml:Element|xml:Comment|xml:ProcessingInstruction|xml:Text>>)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.8.0_  \n  \nApplies a function to each item in an xml sequence, and returns an xml sequence of the results.\nEach item is represented as a singleton value.\n  \n**Params**  \n- `function ()` func: a function to apply to each child or `item`  \n  \n**Returns** `xml<xml<xml:Element|xml:Comment|xml:ProcessingInstruction|xml:Text>>`   \n- new xml value containing result of applying `func` to each child or `item`  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "map(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "cloneWithType(typedesc<anydata> t)(t|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:1.0.0_  \n  \nConstructs a value with a specified type by cloning another value.  \n**Params**  \n- `typedesc<anydata>` t: the type for the cloned to be constructed  \n  \n**Returns** `t|error`   \n- a new value that belongs to type `t`, or an error if this cannot be done  \n  \nWhen `v` is a structural value, the inherent type of the value to be constructed  \ncomes from `t`. When `t` is a union, it must be possible to determine which  \nmember of the union to use for the inherent type by following the same rules  \nthat are used by list constructor expressions and mapping constructor expressions  \nwith the contextually expected type. If not, then an error is returned.  \nThe `cloneWithType` operation is recursively applied to each member of `v` using  \nthe type descriptor that the inherent type requires for that member.  \n  \nLike the Clone abstract operation, this does a deep copy, but differs in  \nthe following respects:  \n- the inherent type of any structural values constructed comes from the specified  \ntype descriptor rather than the value being constructed  \n- the read-only bit of values and fields comes from the specified type descriptor  \n- the graph structure of `v` is not preserved; the result will always be a tree;  \nan error will be returned if `v` has cycles  \n- immutable structural values are copied rather being returned as is; all  \nstructural values in the result will be mutable.  \n- numeric values can be converted using the NumericConvert abstract operation  \n- if a record type descriptor specifies default values, these will be used  \nto supply any missing members  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "cloneWithType(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "cloneReadOnly()(Cloneable & readonly)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:1.0.0_  \n  \nReturns a clone of `v` that is read-only, i.e. immutable.\nIt corresponds to the ImmutableClone(v) abstract operation,\ndefined in the Ballerina Language Specification.\n  \n  \n  \n**Returns** `Cloneable & readonly`   \n- immutable clone of `v`  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "cloneReadOnly()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "toBalString()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:1.0.0_  \n  \nConverts a value to a string that describes the value in Ballerina syntax.  \n  \n  \n**Returns** `string`   \n- a string resulting from the conversion  \n  \nIf `v` is anydata and does not have cycles, then the result will  \nconform to the grammar for a Ballerina expression and when evaluated  \nwill result in a value that is == to v.  \n  \nThe details of the conversion are specified by the ToString abstract operation  \ndefined in the Ballerina Language Specification, using the expression style.  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "toBalString()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "toJson()(json)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:1.0.0_  \n  \nConverts a value of type `anydata` to `json`.\nThis does a deep copy of `v` converting values that do\nnot belong to json into values that do.\nA value of type `xml` is converted into a string as if\nby the `toString` function.\nA value of type `table` is converted into a list of\nmappings one for each row.\nThe inherent type of arrays in the return value will be\n`json[]` and of mappings will be `map<json>`.\nA new copy is made of all structural values, including\nimmutable values.\n  \n  \n  \n**Returns** `json`   \n- representation of `v` as value of type json  \nThis panics if `v` has cycles.  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "toJson()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "isReadOnly()(boolean)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:1.0.0_  \n  \nTests whether `v` is read-only, i.e. immutable\nReturns true if read-only, false otherwise.\n  \n  \n  \n**Returns** `boolean`   \n- true if read-only, false otherwise  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "isReadOnly()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "clone()(Cloneable)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:1.0.0_  \n  \nReturns a clone of `v`.\nA clone is a deep copy that does not copy immutable subtrees.\nA clone can therefore safely be used concurrently with the original.\nIt corresponds to the Clone(v) abstract operation,\ndefined in the Ballerina Language Specification.\n  \n  \n  \n**Returns** `Cloneable`   \n- clone of `v`  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "clone()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ensureType(typedesc<any> t)(t|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:1.0.0_  \n  \nSafely casts a value to a type.\nThis casts a value to a type in the same way as a type cast expression,\nbut returns an error if the cast cannot be done, rather than panicking.  \n**Params**  \n- `typedesc<any>` t: a typedesc for the type to which to cast it\nreturn - `v` cast to the type described by `t`, or an error, if the cast cannot be done  \n  \n**Returns** `t|error`   \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "ensureType(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toString()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:1.0.0_  \n  \nPerforms a direct conversion of a value to a string.\nThe conversion is direct in the sense that when applied to a value that is already\na string it leaves the value unchanged.\n  \n  \n  \n**Returns** `string`   \n- a string resulting from the conversion  \n  \nThe details of the conversion are specified by the ToString abstract operation  \ndefined in the Ballerina Language Specification, using the direct style.  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "toString()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "toJsonString()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:1.0.0_  \n  \nReturns the string that represents `v` in JSON format.\n`v` is first converted to `json` as if by the `toJson` function.\n  \n  \n  \n**Returns** `string`   \n- string representation of `v` converted to `json`  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "toJsonString()",
      "insertTextFormat": "Snippet"
    }
  ]
}
