{
  "position": {
    "line": 3,
    "character": 14
  },
  "source": "statement_context/source/foreach_stmt_ctx_source19.bal",
  "items": [
    {
      "label": "foreach - numStream",
      "kind": "Snippet",
      "detail": "foreach snippet for iterable variable - numStream",
      "sortText": "Q",
      "insertText": "foreach int item in numStream {\n\t${1}\n}",
      "insertTextFormat": "Snippet",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 3,
              "character": 4
            },
            "end": {
              "line": 3,
              "character": 14
            }
          },
          "newText": ""
        }
      ]
    },
    {
      "label": "filter(function () func)(stream<any|ErrorType, ErrorType?>)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.stream:0.4.0_  \n  \nSelects the members from a stream for which a function returns true.\n  \n**Params**  \n- `function ()` func: a predicate to apply to each member to test whether it should be selected  \n  \n**Returns** `stream<any|ErrorType, ErrorType?>`   \n- new stream only containing members of `stm` for which `func` evaluates to true  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "filter(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "next()(record {| any|ErrorType value; |}|ErrorType?)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.stream:0.4.0_  \n  \nReturns the next element in the stream wrapped in a record or () if the stream ends.\n  \n  \n  \n**Returns** `record {| any|ErrorType value; |}|ErrorType?`   \n- If the stream has elements, return the element wrapped in a record with single field called `value`,  \notherwise returns ()  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "next()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "reduce(function () func, any|ErrorType initial)(any|ErrorType|ErrorType)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.stream:0.4.0_  \n  \nCombines the members of a stream using a combining function.\nThe combining function takes the combined value so far and a member of the stream,\nand returns a new combined value.\n  \n**Params**  \n- `function ()` func: combining function  \n- `any|ErrorType` initial: initial value for the first argument of combining function `func`  \n  \n**Returns** `any|ErrorType|ErrorType`   \n- result of combining the members of `stm` using `func`  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "reduce(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "iterator()(object {public isolated function next() returns record {| any|ErrorType value; |}|ErrorType? ;})",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.stream:0.4.0_  \n  \nReturns an iterator over a stream.\n  \n  \n  \n**Returns** `object {public isolated function next() returns record {| any|ErrorType value; |}|ErrorType? ;}`   \n- a new iterator object that will iterate over the members of `stm`.  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "iterator()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "forEach(function () func)(ErrorType?)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.stream:0.4.0_  \n  \nApplies a function to each member of a stream.\nThe function `func` is applied to each member of stream `stm` in order.\n  \n**Params**  \n- `function ()` func: a function to apply to each member  \n  \n**Returns** `ErrorType?`   \n- () if the close completed successfully, otherwise an error  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "forEach(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "map(function () func)(stream<any|ErrorType, ErrorType?>)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.stream:0.4.0_  \n  \nApplies a function to each member of a stream and returns a stream of the results.\n  \n**Params**  \n- `function ()` func: a function to apply to each member  \n  \n**Returns** `stream<any|ErrorType, ErrorType?>`   \n- new stream containing result of applying `func` to each member of `stm` in order  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "map(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "close()(ErrorType??)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.stream:0.4.0_  \n  \nCloses a stream.\nThis releases any system resources being used by the stream.\nClosing a stream that has already been closed has no efffect and returns `()`.\n  \n  \n  \n**Returns** `ErrorType??`   \n- () if the close completed successfully, otherwise an error  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "close()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "toBalString()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:1.0.0_  \n  \nConverts a value to a string that describes the value in Ballerina syntax.  \n  \n  \n**Returns** `string`   \n- a string resulting from the conversion  \n  \nIf `v` is anydata and does not have cycles, then the result will  \nconform to the grammar for a Ballerina expression and when evaluated  \nwill result in a value that is == to v.  \n  \nThe details of the conversion are specified by the ToString abstract operation  \ndefined in the Ballerina Language Specification, using the expression style.  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "toBalString()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ensureType(typedesc<any> t)(t|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:1.0.0_  \n  \nSafely casts a value to a type.\nThis casts a value to a type in the same way as a type cast expression,\nbut returns an error if the cast cannot be done, rather than panicking.  \n**Params**  \n- `typedesc<any>` t: a typedesc for the type to which to cast it\nreturn - `v` cast to the type described by `t`, or an error, if the cast cannot be done(Defaultable)  \n  \n**Returns** `t|error`   \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "ensureType(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toString()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:1.0.0_  \n  \nPerforms a direct conversion of a value to a string.\nThe conversion is direct in the sense that when applied to a value that is already\na string it leaves the value unchanged.\n  \n  \n  \n**Returns** `string`   \n- a string resulting from the conversion  \n  \nThe details of the conversion are specified by the ToString abstract operation  \ndefined in the Ballerina Language Specification, using the direct style.  \n  \n"
        }
      },
      "sortText": "D",
      "insertText": "toString()",
      "insertTextFormat": "Snippet"
    }
  ]
}
