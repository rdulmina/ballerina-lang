/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply from: "$rootDir/gradle/javaProject.gradle"


dependencies {
    implementation project(':ballerina-lang')
    baloCreat project(':lib-creator')
}

configurations {
    distributionBalo {
        transitive false
    }

    balDoc {
        transitive false
    }

    distributionBirJar {
        transitive false
    }
    baloCreat {
        transitive false
    }
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath
        ]
        classpath = files()
    }
}

class BallerinaLangLibBuildTask extends JavaExec {
    def projectDir = ''
    def distCache = ''
    def pkgName = project.name
    def skipBootstrap = 'false'

    BallerinaLangLibBuildTask() {
        setMain('org.ballerinalang.stdlib.utils.BuildLangLib')
    }

    @Override
    void exec() {
        def args = []
        args << projectDir
        args << distCache
        args << pkgName
        args << skipBootstrap

        super.setArgs(args)
        super.exec()
    }

    @Override
    JavaExec args(Object... args) {
        throw new UnsupportedOperationException()
    }

    @Override
    JavaExecSpec args(Iterable<?> args) {
        throw new UnsupportedOperationException()
    }

}

task createDistributionCache() {
    dependsOn configurations.distributionBalo
    doLast {
        configurations.distributionBalo.each { artifact ->
            copy {
                from zipTree( artifact.getPath() )
                into "$buildDir/repo"
            }
        }
    }
}

ext.modName = project.projectDir.name



task copyBallerinaProject(type: Copy) {
    from project.projectDir.toString() + "/src/main/ballerina/"
    into project.buildDir.toString() + "/ballerina-src"
}

task ballerinaLangLibBuild(type: BallerinaLangLibBuildTask) {
    standardOutput = System.out
    errorOutput = System.err
    projectDir = project.buildDir.toString() + "/ballerina-src" // + modName
    distCache = project.buildDir.toString()
    classpath = project.configurations.baloCreat
    dependsOn copyBallerinaProject
    dependsOn createDistributionCache
    dependsOn jar
    inputs.files("src/main/ballerina")
    outputs.file("$buildDir/ballerina-src/target/" + modName + ".zip")
    outputs.file("$buildDir/ballerina-src/target/" + modName + ".jar")
    outputs.cacheIf { true }
    classpath += files(jar.archivePath)
}

artifacts {
    distributionBalo file("$buildDir/ballerina-src/target/" + modName + ".zip"), {
        builtBy(ballerinaLangLibBuild)
    }
    distributionBirJar file("$buildDir/ballerina-src/target/" + modName + ".jar"), {
        builtBy(ballerinaLangLibBuild)
    }
    balDoc file("$buildDir/ballerina-src/target/apidocs/"), {
        builtBy(ballerinaLangLibBuild)
    }
}
